[[@DataLank,xxmSession,fCommon]][[!var
db:TDataConnection;
qr:TQueryResult;
i,tz,c:integer;
s,t:string;
]][[

Context.Include('dHead.xxmi');

<<div style="position:fixed;top:0;left:0em;background-color:gold;padding:4pt;user-select:none;">
<a href="."><img src="img_l.png" width="16" height="16" border="0" alt="Back" /></a>
<a href="Feeds.xxm"><img src="img_l.png" width="16" height="16" border="0" alt="Back" /></a>
&nbsp;
<b>Settings</b>
&nbsp;
</div>

<div style="height:1.5em;">&nbsp;</div>>

db:=Session.Connection;
case Context['x'].AsInteger of
  0:
   begin
    qr:=TQueryResult.Create(db,'select * from "User" where id=$1',[Session.UserID]);
    try
      tz:=qr.GetInt('timezone');
      <<form method="post">
      <input type="hidden" name="x" value="1" />
      <dl>
      <dt>time zone</dt>
      <dd>
      <select name="z1">>
      for i:=-14 to +12 do
      begin
        if i<0 then s:='' else s:='+';
        if i=tz div 100 then t:=' selected="1"' else t:='';
        <<option[[#t]]>>=s+Format('%.2d',[i])<</option>>
      end;
      <</select>
      :
      <select name="z2">>
      for i:=0 to 3 do
      begin
        if (i*15=tz mod 100) or (-i*15=tz mod 100) then t:=' selected="1"' else t:='';
        <<option[[#t]]>>=Format('%.2d',[i*15])<</option>>
      end;
      <</select>
      //TODO: full list, DST support
      </dd>
      <dt>default post load batch size</dt>
      [[
      if qr.IsNull('batchsize') then i:=Session.DefaultBatchSize else i:=qr.GetInt('batchsize');
      ]]
      <dd><input type="text" name="batchsize" value="[[=i]]" /></dd>
      <p><input type="submit" value=" Apply " /></p>
      </form>>
    finally
      qr.Free;
    end;
    <<p><b>block specific URL&#x2019;s</b></p>>
    qr:=TQueryResult.Create(db,'select * from "UserBlock" where user_id=$1 order by lower(url)',[Session.UserID]);
    try
      if not qr.EOF then
       begin
        <<script>
        function rURL(){
          return confirm('Are you sure to remove this URL block prefix?');
        }
        </script>>
       end;
      while qr.Read do
       begin
        <<div class="post">
        <div class="date">>=FormatDateTime('ddd yyyy-mm-dd hh:nn',double(qr['created'])+Session.TimeBias)<</div>
        [[=qr['url']]]
        <a href="[[?'x',4,'id',qr['id']]]" style="color:#0000CC;" onclick="return rURL();">[remove]</a>
        </div>>
       end;
    finally
      qr.Free;
    end;
    <<p><form method="post">
    <input type="hidden" name="x" value="3" />
    <input type="text" name="url" style="width:12em;" autocomplete="off" />
    <input type="submit" value="Add" />
    </form></p>
    <p><b>previous logins:</b></p>>
    c:=0;
    s:=Context.Cookie['feederAutoLogon'];
    qr:=TQueryResult.Create(db,'select * from "UserLogon" where user_id=$1 order by last desc',[Session.UserID]);
    try
      while qr.Read do
       begin
        <<div class="post">
        <div class="date">>=FormatDateTime('ddd yyyy-mm-dd hh:nn',double(qr['last'])+Session.TimeBias)<</div>
        [[=qr['address']]]
        "[[=qr['useragent']]]"
        [[
        if s=qr.GetStr('key') then
         begin
          <<img src="img_l.png" width="16" height="16" alt="current session" />>
          c:=qr.GetInt('chart');
         end;
        ]]
        <a href="[[?'x',2,'id',qr['id']]]" style="color:#0000CC;">[revoke]</a>
        </div>>
       end;
    finally
      qr.Free;
    end;
    <<p><b>badge on my website:</b></p>
    <p>Copy and paste this HTML code to somewhere suitable on your homepage:</p>>

    <<textarea style="width:75vw;height:2em;" id="badge1" onmouseup="document.getElementById('badge1').select();"><iframe src="[[=PublicURL]]Badge.xxm?x=[[=Copy(Context.Cookie['feederAutoLogon'],1,12)
    ]]" style="border:1px solid black;width:100pt;height:20pt;"></iframe></textarea>>

    <<p><b>post volume chart</b></p>>
    if c=0 then
     begin
      <<form method="post">
      <input type="hidden" name="x" value="5" />
      <p>
      Generate post volume chart (generated by the feed loading schedule)
      <br />
      <input type="submit" value="Enable" />
      </p>
      </form>>
     end
    else
     begin
      <<form method="post">
      <input type="hidden" name="x" value="6" />
      <p>
      <img src="charts/[[=StringReplace(Copy(s,1,14),'/','=',[rfReplaceAll])]].png" width="80" height="40" style="border:1px solid black;" />
      (generated by the feed loading schedule)
      <br />
      <textarea style="width:75vw;height:2em;" id="badge2" onmouseup="document.getElementById('badge2').select();"><a href="[[=PublicURL]]"><img src="[[=PublicURL+'charts/'+StringReplace(Copy(s,1,14),'/','=',[rfReplaceAll])+'.png']]" width="80" height="40" border="0" style="border:1px solid black;" /></a></textarea>
      <br />
      <input type="submit" value="Disable" />
      </p>
      </form>>
     end;

    qr:=TQueryResult.Create(db,'select version()',[]);
    try
      <<p style="color:silver;">>=Context.ContextString(csVersion)<<br />>=qr[0]<</p>>
    finally 
      qr.Free;
    end;

   end;
  1://update
   begin
    db.BeginTrans;
    try
      tz:=Context['z1'].AsInteger;
      i:=Context['batchsize'].AsInteger;
      if tz<0 then tz:=tz*100-Context['z2'].AsInteger else tz:=tz*100+Context['z2'].AsInteger;
      db.Execute('update "User" set timezone=$1, batchsize=$2 where id=$3',
        [tz
        ,i
        ,Session.UserID
        ]);
      Session.TimeBias:=(tz div 100)/24.0+(tz mod 100)/1440.0;
      Session.DefaultBatchSize:=i;
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    <<p>Settings updated</p>
    <p><a href="Feeds.xxm">back</a></p>>
   end;
  2://revoke
   begin
    db.BeginTrans;
    try
      db.Execute('delete from "UserLogon" where user_id=$1 and id=$2',[Session.UserID,Context['id'].AsInteger]);
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    //TODO: kill live sessions
    <<p>Auto-logon revoked</p>
    <p><a href="?">Continue...</a></p>
    <script>document.location.replace('?');</script>>
   end;
  3://add user block URL
   begin
    s:=Context['url'].Value;
    if (Length(s)<8) or not((Copy(s,1,4)='http') or (Copy(s,1,4)='tag:') or (Copy(s,1,9)='category:')) then
      raise Exception.Create('Invalid Block URL prefix');
    db.BeginTrans;
    try
      db.Insert('UserBlock',['user_id',Session.UserID,'url',s,'created',double(UtcNow)],'id');
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    <<script>document.location.replace('?');</script>
    <p><a href="?">continue...</a></p>>
   end;
  4://remove user block URL
   begin
    db.BeginTrans;
    try
      db.Execute('delete from "UserBlock" where user_id=$1 and id=$2',[Session.UserID,Context['id'].AsInteger]);
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    <<p>URL block removed</p>
    <p><a href="?">Continue...</a></p>
    <script>document.location.replace('?');</script>>
   end;
  5://enable post volume chart
   begin
    s:=Context.Cookie['feederAutoLogon'];
    db.BeginTrans;
    try
      db.Execute('update "UserLogon" set chart=$1 where user_id=$2 and key=$3',[1{??},Session.UserID,s]);
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    <<p>Post volume chart enabled</p>
    <p><a href="?">Continue...</a></p>
    <script>document.location.replace('?');</script>>
   end;
  6://disable post volume chart
   begin
    s:=Context.Cookie['feederAutoLogon'];
    db.BeginTrans;
    try
      db.Execute('update "UserLogon" set chart=null where user_id=$1 and key=$2',[Session.UserID,s]);
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    ClearChart(StringReplace(Copy(s,1,14),'/','=',[rfReplaceAll]));
    <<p>Post volume chart disabled</p>
    <p><a href="?">Continue...</a></p>
    <script>document.location.replace('?');</script>>
   end;
  //7:
  else raise Exception.Create('Unknown action');
end;

Context.Include('dFoot.xxmi');
